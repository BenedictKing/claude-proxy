# --- 阶段 1: 项目构建 ---
FROM docker.1ms.run/oven/bun:latest AS builder

WORKDIR /src

# 复制项目根目录配置文件
COPY package.json ./
COPY tsconfig.json ./

# 复制backend必要文件
COPY backend/src ./backend/src
COPY backend/package.json ./backend/package.json
COPY backend/tsconfig.json ./backend/tsconfig.json

# 复制frontend必要文件
COPY frontend/src ./frontend/src
COPY frontend/index.html ./frontend/index.html
COPY frontend/package.json ./frontend/package.json
COPY frontend/postcss.config.js ./frontend/postcss.config.js
COPY frontend/tailwind.config.js ./frontend/tailwind.config.js
COPY frontend/tsconfig.json ./frontend/tsconfig.json
COPY frontend/vite.config.ts ./frontend/vite.config.ts

# 使用淘宝npm镜像配置bun并安装依赖
RUN echo '[install]\nregistry = "https://registry.npmmirror.com/"' > bunfig.toml && \
    bun install
RUN bun run build

# 验证构建产物
RUN ls -la /src/frontend/dist/ || echo "前端构建失败"
RUN ls -la /src/backend/dist/ || echo "后端构建失败"

# --- 阶段 2: 一体化运行时 ---
FROM docker.1ms.run/oven/bun:latest AS runtime

WORKDIR /app

# 从构建阶段复制后端构建产物和必要文件
COPY --from=builder /src/backend/dist ./dist
COPY --from=builder /src/backend/package.json ./package.json

# 从构建阶段复制前端构建产物到 frontend/dist（保持相对路径结构）
COPY --from=builder /src/frontend/dist ./frontend/dist

# 使用淘宝npm镜像配置bun并安装生产依赖
RUN echo '[install]\nregistry = "https://registry.npmmirror.com/"' > bunfig.toml && \
    bun install --production

# 验证文件复制结果
RUN ls -la /app/frontend/dist/ || echo "前端文件复制失败"
RUN ls -la /app/dist/ || echo "后端文件复制失败"

# 创建配置目录和日志目录
RUN mkdir -p /app/.config/backups /app/logs

# 暴露统一端口
EXPOSE 3000

# 健康检查
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD bun run -e 'await fetch("http://localhost:3000/health").then(r => r.ok ? process.exit(0) : process.exit(1))' || exit 1

# 设置环境变量
ENV PORT=3000
ENV NODE_ENV=production
ENV ENABLE_WEB_UI=true

# 启动命令 - 直接运行编译后的文件
CMD ["bun", "run", "dist/server.js"]
